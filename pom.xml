<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Copyright Â© 2021 Schlichtherle IT Services
  -
  - Licensed under the Apache License, Version 2.0 (the "License");
  - you may not use this file except in compliance with the License.
  - You may obtain a copy of the License at
  -
  -     https://www.apache.org/licenses/LICENSE-2.0
  -
  - Unless required by applicable law or agreed to in writing, software
  - distributed under the License is distributed on an "AS IS" BASIS,
  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  - See the License for the specific language governing permissions and
  - limitations under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>global.namespace.parent-pom</groupId>
        <artifactId>parent-pom</artifactId>
        <version>16</version>
    </parent>

    <groupId>global.namespace.bali</groupId>
    <artifactId>bali-java-root</artifactId>
    <version>0.11.5</version>
    <packaging>pom</packaging>

    <name>Bali DI Root for Java</name>
    <description>Bali DI is a Java code generator for dependency injection.</description>

    <url>https://github.com/christian-schlichtherle/bali-di</url>
    <inceptionYear>2021</inceptionYear>
    <issueManagement>
        <system>Github</system>
        <url>https://github.com/christian-schlichtherle/bali-di/issues</url>
    </issueManagement>
    <scm>
        <connection>scm:git:https://github.com/christian-schlichtherle/bali-di.git</connection>
        <developerConnection>scm:git:git@github.com:christian-schlichtherle/bali-di.git</developerConnection>
        <url>https://github.com/christian-schlichtherle/bali-di</url>
        <tag>v0.11.5</tag>
    </scm>

    <properties>
        <maven.compiler.showDeprecation>true</maven.compiler.showDeprecation>
        <maven.compiler.showWarnings>true</maven.compiler.showWarnings>
    </properties>

    <modules>
        <module>annotation</module>
        <module>java</module>
        <module>java-sample</module>
    </modules>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <configuration>
                        <compilerArgs>
                            <!--
                              - We turn off:
                              - + `auxiliaryClass` because it would complain about every call to `MyModule$.new$()`
                                  which is required to use Bali DI.
                              - + `processing` because it would complain about every runtime annotation.
                              -->
                            <arg>-Xlint:all,-auxiliaryclass,-processing</arg>
                        </compilerArgs>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>net.alchim31.maven</groupId>
                    <artifactId>scala-maven-plugin</artifactId>
                    <configuration>
                        <args>
                            <arg>-deprecation</arg>
                            <arg>-feature</arg>
                            <arg>-unchecked</arg>
                        </args>
                        <compileOrder>JavaThenScala</compileOrder>
                        <sendJavaToScalac>false</sendJavaToScalac>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>
